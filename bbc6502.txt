10  REM CHANGE OUTPUT TO SCREEN ONLY
20  *FX3,4
30  DIM STARTASM 256
40  PORTB=&6000:PORTA=&6001:DDRB=&6002:DDRA=&6003
50  LCDE=&80:LCDRW=&40:LCDRS=&20
60  FOR PASS%=4 TO 7 STEP 3
70  P%=&8000:O%=STARTASM
80  PRINT "P%=";~P%;" O%=";~O%
90  [
100  OPT PASS%
110  .ROMADDR
120  JMP RESET
130  \ SENDS AN INSTRUCTION TO THE LCD. ASSUMES INSTR IN ACCUMULATOR
140  .LCDSENDI
150    STA PORTB
160    \ CLEAR RS/RW/E BITS ON LCD
170    LDA #&0
180    STA PORTA
190    \ SET ENABLE TO SEND INSTRUCTION
200    LDA #LCDE
210    STA PORTA
220    \ CLEAR RS/RW/E BITS 
230    LDA #0
240    STA PORTA
250    RTS
260  \ PRINTS A CHAR TO DISPLAY, ASSUMES CHAR IS IN ACCUMULATOR
270  .LCDPRINTC
280    \ SEND DATA ON PORT B TO DATA REGISTER ON LCD
290    STA PORTB
300    \ REGISTER SELECT SET TO 1 BEECAUSE SENDING DATA, NOT INSTR
310    LDA #LCDRS
320    STA PORTA
330    \ SET RS AND E TO 1
340    LDA #LCDRS
350    ORA #LCDE
360    STA PORTA
370    \ JUST SET REGISTER SELECT
380    LDA #LCDRS
390    STA PORTA
400    RTS
410  .RESET
420    \ PORT A TO OUTPUT
430    LDA #&FF
440    STA DDRB
450    \ TOP 3 PINS PORTA TO OUTPUT
460    LDA #&E0
470    STA DDRA
480    \ 8BIT MODE, 2 LINE DISPLAY, 5X8 FONT
490    LDA #&38
500    JSR LCDSENDI
510    \ DISPLAY ON, CURSOR ON, BLINK OFF
520    LDA #&0E
530    JSR LCDSENDI 
540    \ INCREMENT AND SHIFT CURSOR, DON'T SHIFT DISPLAY
550    LDA #&06
560    JSR LCDSENDI
570    \ PRINT CHARACTERS
580    LDX #0
590    .LOOPCHARS
600    LDA HELLOSTR,X
610    JSR LCDPRINTC
620    INX
630    CPX #13
640    BNE LOOPCHARS
650  .LOOP
660    JMP LOOP
670    .HELLOSTR EQUS "HELLO, hello!"
680  :]
690  NEXT PASS%
700  P%=O%
710  [
720  OPT3
730  .ENDASM
740  :]
750  REM ---MAIN VARS---
760  MSGTYPE%=1      :REM MSG TYPE
770  NUMBYTES%=0     :REM NUM BYTES TO SEND
780  MAXBYTES%=8     :REM MAX BYTES TO SEND PER MSG
790  BYTESSUM%=0     :REM SUM OF BYTES FOR CHECKSUM
800  DIM HEADER$(3)  :REM HEADER ARRAY WITH MSG HEADER AND CHECKSUM
810  DIM BYTES$(MAXBYTES%) : REM BYTE ARRAY TO SEND
820  PRINT "SENDING 6502 START ADDRESS"
830  BYTES$(0)=CHR$(&FC)
840  BYTES$(1)=CHR$(&7F)
850  BYTES$(2)=CHR$(&00)
860  BYTES$(3)=CHR$(&80)
870  NUMBYTES%=4
880  BYTESSUM%=&FC+&7F+&00+&80
890  PROC_SEND
900  PRINT "DONE"
910  MSGTYPE%=1 :REM RESET MSG TYPE FOR REAL ROM BYTES
920  REM FIRST TWO BYTES ARE WHERE TO STORE IN ROM 
930  BYTES$(0)=CHR$(0)
940  BYTES$(1)=CHR$(0)
950  NUMBYTES%=2
960  PRINT "SENDING ROM DATA"
970  FOR I%=STARTASM TO ENDASM-1
980    BYTES$(NUMBYTES%)=CHR$(?I%)
990    NUMBYTES%=NUMBYTES%+1
1000    BYTESSUM%=BYTESSUM%+?I%
1010    IF NUMBYTES%=MAXBYTES% OR I%=ENDASM-1 THEN PROC_SEND
1020  NEXT I%
1030  PRINT "DONE"
1040  END
1050  DEF PROC_RESET
1060    NUMBYTES%=0
1070    BYTESSUM%=0
1080  ENDPROC
1090  DEF PROC_MAKEHEADER
1100    LOCAL MSGHEADER%
1110    LOCAL CHECKSUM%
1120    LOCAL CSUMHI%
1130    LOCAL CSUMLO%
1140    REM ------------------------
1150    REM FIRST 3 BITS ARE TYPE, SECOND 5 ARE NUMBER OF BYTES
1160    MSGHEADER%=MSGTYPE%*2^5+NUMBYTES%
1170    REM ------------------------
1180    REM GET 1S COMPLEMENT OF SUMMED BYTES FOR CHECKSUM
1190    REM BASIC DOESN'T HAVE XOR, SO THIS DOES XOR
1200    CHECKSUM%=(BYTESSUM%+4095)-2*(BYTESSUM% AND 4095)
1210    CSUMHI%=CHECKSUM%/256     :REM HI BYTE OF CHECKSUM
1220    CSUMLO%=CHECKSUM% AND 255 :REM LO BYTE OF CHECKSUM
1230    REM ------------------------
1240    REM PRINT "BYTES: ";NUMBYTES%;" CHECKSUM: ";CHECKSUM%;
1250    REM PRINT " SUM: ";BYTESSUM%;" MSGTYPE: ";MSGTYPE%  
1260    HEADER$(0)=CHR$(MSGHEADER%)
1270    HEADER$(1)=CHR$(CSUMLO%)
1280    HEADER$(2)=CHR$(CSUMHI%)
1290  ENDPROC
1300  DEF PROC_SEND
1310    PROC_MAKEHEADER
1320    *FX3,7
1330    FOR H%=0 TO 2
1340      PRINT HEADER$(H%);
1350    NEXT H%
1360    FOR B%=0 TO NUMBYTES%-1
1370      PRINT BYTES$(B%);
1380    NEXT B%
1390    *FX3,4
1400    PRINT ".";
1410    PROC_RESET
1420    MSGTYPE%=2 :REM CONTINUATION MESSAGE TYPE
1430  ENDPROC


